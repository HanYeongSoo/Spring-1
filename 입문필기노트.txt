1. biild. gradle (Gradle)은 지금은 버전 설정하고 라이브러리 땡겨온다고 정도로만 생각

2022-01-24

1. 디펜던시는 서로 땡겨오기 때문에 꽤나 많다.
2. 현업에서는 sysout이 아니고 로그(logging)를 찍어야 한다...
	- logback (요즘 많이 사용) // slf4j (인터페이스) 
3. Test 관련
	- Junit5 버전 많이 사용


4. 웰컴 페이지 관련
	-. spring.io 가서 Spring Boot로 가서 static content >> Welcome Page
	-. 즉 static에 index가 있냐 없냐로 확인
	

5. window에서 gradle 빌드하고 배포하기
	-. 빌드 할 프로젝트까지 cmd로 접근
	-. gradlew build 입력 후 dir로 libs폴더가 있는지 확인
	-. java -jar 프로젝트이름-0.0.1-SNAPSHOT.jar 입력 후 실행되는지 확인


2022-01-25

1. 정적 컨텐츠, MVC와 템플릿 엔진, API
	- 정적 컨텐츠 >> html을 요청하면 반납해줌.

	- MVC : Controller , View, Model 세 가지로 나눔.
	- view 는 화면만 , controller에 비지니스 로직 , model은 그 데이터 전달
	- 1. 웹 브라우져 요청 >> 2. Controller에서 return과 model전달 >> 3. viewResolver에서 templates/hello-template.html처리 >>
		>> 4. 웹 브라우저로 반환

2022-01-26
	- API => JSON관련 (Vue나 React등등)
	  1. @ResponseBody : return부분에 직접 데이터를 전달하겠다.
	  2. static으로 만들면 그 class name.static으로 선언한 class가 사용 가능 ==> public class Controller이고 static class hello 이면 Controlle.hello
		로 사용이 가능하다는 뜻!!
	  3. JSON ==  key, value로 이루어진 구조 {"name" : "spring!!"} 
	  4. Getter,Setter == 자바 빈 표준방식 (private에서 만들어지니까 게터랑 세터로만 접근이 가능, 자바의 캡슐화랑 관련)
	  5. 요즘엔 객체가 들어오면 JSON방식으로 주는게 표준 --> @ResponseBody를 보는 순간 JsonConverter와 StringConverter가 반응
	  6. 기본 객체처리 --> 잭슨(Jackson)과 Gson(구글이 만든거)
	  7. 실무에선 거의 그대로 쓰기 때문에 이렇게 쓰는구나! 정도만 알고 있을것 지금은!
	  

- 회원 관리 예제
	1. 비즈니스 요구사항 정리
	  - 데이터 : 회원ID, 이름
	  - 기능 : 회원 등록, 회원 조회
	  - 아직 데이터 저장소가 선정되지 않음 (가상의 시나리오) (== DB가 정해지지 않음)

	2. 일반적인 웹 애플리케이션 계층 구조
	  - 컨트롤러 > 서비스 > 레포지토리 > DB
		       도메인
	  - 컨트롤러 : 웹 MVC의 컨트롤러 역할
	  - 서비스 : 핵심 비즈니스 로직 구현
	  - 레포지토리 : 데이터베이스에 접근, 도메인 객체를 DB에 저장하고 관리
	  - 도메인 : 비즈니스 도메인 객체 (EX 회원, 주문, 쿠폰 등등 주로 데이터베이스에 저장하고 관리됨)

	3. 클래스 의존 관계
	  - MemberService >> (interface로!)MemberRepository << MemoryMemberRepository
	  
	4. Interface로 구현을 해 두면 향후에 기술 및 DB가 선정되고 나서 갈아끼우기가 쉬움!!


	5. 회원 레포지토리 테스트 케이스 작성
	  - *** 컨트롤+쉬프트+엔터하면 커서위치 상관없이 다음줄로 커서만 싹 내려감 ***
	  - 처음 보는 거나 생소한 개념 정리하기
	    1. 람다식
	    2. Assertions
	    3. TestCase 자체...?
	    4. Optional<>은 또 뭐냐..

	  - 테스트케이스 하나씩 할때는 잘 되던데 어라 전체를 돌리니까 에러가 뜨네?? why?
	    .- 테스트케이스에서 테스트는 서로 의존관계가 있어선 안됨
	    ._. Member객체에서 Member1과 Member2가 중복됨.
	    .- map으로 선언한 변수.clear를 실행하는 class를 추가한 후 test쪽에서 그 clear를 부르면 됨

	6. 테스트는 진짜 중요하다고 하시네... 깊이 알면 좋대!!!

2022-01-27

	7. 회원 서비스 개발
	  -. Service에서 로직 개발
	  -.         memberRepository.findByName(member.getName())
           		     .ifPresent(m -> {
                	          throw new IllegalStateException("이미 존재하는 회원입니다.");
           		});
		완죤 처음보는 코드...

	8. 회원 서비스 테스트
	  .- Service에서 짠 로직  Test하려면 컨트롤+쉬프트+T 눌러서 Junit5로하고 클릭해서 만들면 Test쪽에 껍데기 자동 완성!
	  .- Test에선 메소드 걍 한글로 짜도 됨
	  .- given // when // then 3 부분으로 진행
	  .- 


2022-02-07

	1. 스프링 빈을 등록하는 2가지 방법 (둘 다 알고있어야 함)
		.- 컴포넌트 스캔과 자동 의존관계 설정 (DI)
		.- 자바 코드로 직접 스프링 빈 등록하기

	2. 자바 코드 직접 입력 관련
		.- @Configuration 설정 후 @Bean 설정

	3. 주입 방식 3가지
		-. 내가 하던 건 필드주입 방식 -> 권장하지 x  
		-. setter주입 방식(public하게 노출되기 때문에 얘도 별로) 
		-. 생성자 주입 방식 (권장)

	4. 보통 한 패키지안에 한개의 controller service repository가 연결

2022-02-08
-. 웹 MVC 맛보기
	1. @GetMapping // @PostMapping 차이점은 대강 알거고
	
	2. Form에서 받은 input에서 name으로 설정한 값이 post방식으로 넘어온다


-. 스프링 DB 접근 기술
	1. H2 데이터 베이스 관련
		.- 설치 버전은 1.4.200
		.- bigint == java에서 int 
		.- generated by default as identity == null값이 들어오면 자동으로 id값을 채워준다
	

	2. 순수 JDBC
		.- build.gradle에 코드 추가 후 gradle refresh후 application.properties에 url과 driver-class-name추가
		.- connection이랑 pre~~랑 resultSet같은걸로 db연결하는거...
		.- 개방 폐쇄 원칙(OCP, Open-Closed Principle) : 확장에는 열려있고, 수정, 변경에는 닫혀있다.
		.- DI를 활용
		


	3. Spring 컨테이너
		.- 트랜잭션 -> db에서 insert가 될 때 커밋을 하냐 안하냐?
		.- @SpringBootTest -> 말 그대로 Test를 위한 어노테이션
		.- @Transactional -> Test 시 db에 값을 커밋을 하지 않고 롤백을 해주는 어노테이션
		.- 통합테스트보다는 단위테스트가 더 추천
		

	4. 스프링 JDBC Template
		.- 스프링 JdbcTemplate과 MyBatis 같은 라이브러리는 JDBC API에서 본 반복 코드를 대부분 제거해준다. 하지만 SQL은 직접 작성해야 한다.

	5. JPA
		.- 객체를 대상으로 쿼리문을 날림
		.- 필기노트 참고
		.- 해외에선 JPA를 많이 사용하고 있음, 국내에선 스타트업쪽이 많이 사용하는듯?
		.- 실무에서 사용하려면 깊이 있는 공부가 필요함
	

	6. 스프링 데이터 JPA
		.- JPA를 배우고 난 후 사용해야함
		.- 여기는 아직 무리...데스?
		.- 복잡한 쿼리문을 아주 쉽게 인터페이스로 만들어놨음 불러오기만 하면 됨

	
-. AOP (Aspect Oriented Programming)

	1. 공통 관심 사항과 핵심 관심 사항을 분리
	
	2. 컨트롤러에서 프록시 service를 호출 후 joinPoint.proceed()를 통해 실제 service로 이동

	3. 









